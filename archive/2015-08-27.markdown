---
title: 20150827
layout: outline
---

Today, in 1953, Alex Lifeson was born. Also, Donald Trump's hair got scarier.

## All

### Warm Up (8:30 - 9:00)

Let's revisit our allergy algorithm from yesterday.

Can you write tests and implementations for the following?

If they have all of the allergies, they should have a score of 255.
If they are allergic to strawberries, tomatoes, chocolate, pollen, and cats, they their score should be 248.
Important: The idea is that you pass in the number (e.g. 248) and the algorithm can return an array with all the things the patient is allergic to.


## 1503

### Front-End Debugging (9:00 - 12:00)

Join my <del>second</del> third favoritest person to walk the earth, Brittany, as she teaches you
the best class in all of space-time, how to debug all of the things.

Seriously, ALL of the things. ALL of them. Every single last one.

Classroom C.

### IdeaBox 2.0 Peer Evaluation (1:00 - 2:00)

Classroom C time!

* Whitney Hiemstra & Max Tedford
* Brett Grigsby & Josh Cass
* Vanessa Gomez & Sally MacNicholas
* Margarett Ly & Drew Reynolds
* Morgan Miller & Lev Kravinsky & Justin Holmes

Find your pair and take turns critiquing
one another's IdeaBox projects.

Spend 30 minutes on one person's project and then swap.

### IdeaBox 2.0 Recap and Refactor (2:00 - 4:00)

Join Horace in Classroom C to reexamine some of the issues from IdeaBox 2.0.


## 1505

### Project Work Time (9:00 - 12:00)

[Everybody's working for the weekend](https://www.youtube.com/watch?v=zL8G5pBZ5CI)

### Check Ins and Project Work Time

Check In Schedule! It is here!

Product Check-Ins with Jorge

* 1:10 - Marla, Lovisa, Dmitry
* 1:30 - Rick, Erik, Drew
* 1:50 - Jack, Adam, Dave
* 2:10 - Sebastian, Max, Alex
* 2:30 - Michael, Rob, Mitch
* 2:50 - Samson, David, Jason
* 3:10 - Tyler, Jai, Mike, Michael

Technical Check-Ins with Andrew

* 1:40 - Marla, Lovisa, Dmitry
* 2:00 - Rick, Erik, Drew
* 2:20 - Jack, Adam, Dave
* 2:40 - Sebastian, Max, Alex
* 3:00 - Michael, Rob, Mitch
* 3:20 - Samson, David, Jason
* 3:40 - Tyler, Jai, Mike, Michael


## 1507

### SQL & Sequel (9:00 - 12:00)

Programming is about data and data lives in databases. Let's dig in. Meet Jeff
in Classroom B.

First we'll do an [Introduction to SQL](https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/introduction_to_sql.markdown). For those exercises we'll use these pairings:

* David Stinnette & Matt Ewell
* Mimi Schatz & Travis Haby
* Regis Boudinot & Jerrod Paul Junker
* Russell Harms & Mary Beth Burch
* Matt Hecker & Bret Doucette
* Ryan Asensio & Alon Waisman
* Justin Holzmann & George Hudson
* Michael Wong & Jeff Ruane
* Chris Cenatiempo & Adam Jensen
* Justin Pease & Rose Kohn

Then we'll do an [Introduction to Sequel](https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/introduction_to_sequel.markdown) and use these pairings:

* Justin Holzmann & Mary Beth Burch
* Michael Wong & Jerrod Paul Junker
* Justin Pease & Jeff Ruane
* Chris Cenatiempo & Bret Doucette
* Russell Harms & Matt Ewell
* Mimi Schatz & Ryan Asensio
* Matt Hecker & Alon Waisman
* Travis Haby & Adam Jensen
* Rose Kohn & George Hudson
* David Stinnette & Regis Boudinot

### Task Manager Transformation with Sequel (1:00 - 4:00)

You're now going to take your Task Manager and Transform it into something wonderful. Again in your new home.

## 1508 - Foxtrot

### Primer on .each (9:00 - 10:00)

Join Mike at the Mega Table to learn about .each.

[Lesson Plan](https://github.com/turingschool/lesson_plans/blob/master/ruby_01-object_oriented_programming_with_ruby/primer_on_each.markdown)

### .each exercises (10:00 - 12:00)

From here, you're going to work on some [exercises](https://gist.github.com/mikedao/abbdb278ccf99f090813) on .each.



### Week 1 Diagnostic (1:00 - 2:30)

Be in Classroom A where you'll work on a diagnostic to assess your learning so far.

If you get finished early, you have a few minutes to quietly work on your homeworks/projects. *At 2:00* we'll go over the questions and answers.

### Spiraling Design & Test (2:30 - 4:00)

For our last session of the day we'll mix together with Echo. See the session details in their section below.

## 1508 - Echo

### Practice makes Perfect (9:00 - 9:30)

1. First, turn to the people on either side of you, and tell them the 4 main directories, and ask them to tell you as well.
2. Read your sentence or more to them. When they read theirs think of one question to ask. Examples: Why is that important to you? How will you do that?
3. Play Simon for 1 minute each: https://github.com/JoshCheek/1508/blob/3de9c9729481c59bcebc6f30b4f10ea52ed5d36c/shell.md#keybindings
4. Write Unicorn from scratch, as quickly as you can, and only referencing the example when you need to.
  * it has a name
  * it has a color which defaults to white
  * it knows if it is white
  * it says sparkly shit

Join Josh in Classroom A.

### Getting Started with Enumerables (9:30 - 12:00)

Stay in Classroom A.  Lets figure out how this incredibly useful set of methods works,
[The material is here](https://github.com/turingschool/lesson_plans/blob/74e3496f4e15f3085484432eea2988f3ca04329e/ruby_01-object_oriented_programming_with_ruby/enumerable_methods_self_discovery.markdown).

### Week 1 Diagnostic (1:00 - 2:30)

Be in Classroom A where you'll work on a diagnostic to assess your learning so far.

If you get finished early, you have a few minutes to quietly work on your homeworks/projects. *At 2:00* we'll go over the questions and answers.

### Spiraling Design and Testing (2:30 - 4:00)

Join Josh in Classroom A.

We've talked about this idea of "spiraling" the design of a solution. You start
with the most trivial of test cases and work outwards. Sounds easy, right? It's
hard to do. Let's practice with a real problem.

1. Get together with the pair listed below
2. Read [the Credit Check challenge](https://github.com/turingschool/challenges/blob/master/credit_check.markdown)
3. Use the strategies we discussed earlier this week to setup a plan of attack
especially focusing on test cases of slowly increasing difficulty
4. Then it's time to write code. Work next to each other and be each other's first-choice
helper when questions/problems pop up. But each of you should do your own programming
on your own computer.

Just after 3:30 we'll convene all together to review one or more solutions. Here are
your random pairings:

* Jason Pilz & Ryan Johnson
* Edgar Duran & Amber Crawford
* Shannon Paige & Graham Ray
* Jhun de Andres & Charissa Law
* Aaron Careaga & Penney Garrett
* Torie Warren & Robbie Lane
* Jill Donohue & Matt Stjernholm
* Marlo Major & Nicole Hall
* Chad Minnerath & Ross Edfort
* Tyler Komoroske & Sekhar Paladugu
* Emily Dowdle & Matt Rooney
* John Senft & Pat Wey & John Slota

### Homework

Can you still do the 2 katas in under 20 seconds? ([here](https://github.com/JoshCheek/1508/blob/3de9c9729481c59bcebc6f30b4f10ea52ed5d36c/shell.md#kata-2),
and [here](https://github.com/JoshCheek/1508/blob/3de9c9729481c59bcebc6f30b4f10ea52ed5d36c/shell.md#kata-3))

If you see something in the environment that could be improved on in under 3 minutes of effort... improve it.
If not, imagine all the people who gave enough of a shit to improve all the deficiencies for you before you got there.
Whoever they were, no one told them to do it, they just saw a need and gave enough of a shit to fill it.

Reread what you wrote on Monday about what it would look like, during your time here, to practice the hard and soft skills.
Choose one of these questions and answer it in 3 sentences or less
(if you have the desire to do more, that is fine, but the requirement is only 1):

* How have you been applying the ideas from the book?
* What things are you doing to apply them well?
* What ways have they worked out already?
* What ways could they be better
* What other things could you apply these ideas to?
* What is the biggest thing you could change that would improve your chances of success here?

Go find someone in Foxtrot and ask them to tell you something they learned this week.
If it's something you already know, listen and let yourself feel joy for them that they
got to learn this thing. If it's something new to you, then listen and let yourself feel
curiosity about what confusions it might solve. If it's something you are pretty sure they
are wrong about, then let them finish, and enjoy their enthusiasm
(their curiosity and motivation will lead them to the vibrant discovery
of how their understanding needs to be amended, don't kill it...
besides, it could be that it's *you* whose wrong ;)
